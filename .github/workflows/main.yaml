name: CI-main

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration-and-e2e:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code to runner
      uses: actions/checkout@v5

    - name: Create system's network
      run: docker network create todo-net || true

    - name: Build, start all services and wait before they're all healthy
      run: |
        cd back-end
        docker compose -f docker-compose.ci.yaml build --no-cache
        docker compose -f docker-compose.ci.yaml up -d --wait

    - name: Run integration tests inside the API container
      run: |
        cd back-end
        docker compose exec -T api sh -c "API_HOST=localhost API_PORT=1337 npm run integration-test"

    - name: Copy integration reports from API container to runner
      run: |
        cd back-end
        mkdir -p test/reports/integration
        docker cp todo-sails-app:/usr/todo-app/test/reports/integration ./test/reports || true
        ls -la test/reports/integration || true

    - name: Upload human-readable integration test report
      if: ${{ always() && env.ACTIONS_RUNTIME_TOKEN != '' }}
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-report
        path: back-end/test/reports/integration

    - name: Upload machine-readable JUnit-like integration report
      if: ${{ always() && env.ACTIONS_RUNTIME_TOKEN != '' }}
      uses: dorny/test-reporter@v2
      with:
        name: 'Integration tests'
        path: 'back-end/test/reports/integration/results.xml'
        reporter: 'java-junit'

    #   - name: Run front-end e2e (Playwright) from runner
    #     working-directory: ./front-end
    #     env:
    #       WEB_URL: "http://localhost:3000"
    #     run: |
    #       npm ci
    #       npx playwright install --with-deps
    #       WEB_URL="$WEB_URL" npx playwright test
        
    - name: Show container logs on failure
      if: failure()
      run: |
        cd back-end
        echo "===== API Logs ====="
        docker compose logs api
        echo "===== DB Logs ====="
        docker compose logs db
        echo "===== Redis Logs ====="
        docker compose logs session-db

    - name: Stop and clean up
      if: always()
      run: |
        cd back-end
        docker compose down -v || true
        docker network rm todo-net || true