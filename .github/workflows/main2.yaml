name: CI-main-2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Debug build context
      run: |
        echo "=== Root directory ==="
        ls -la
        echo "=== Back-end directory ==="
        cd back-end
        pwd
        ls -la
        echo "=== Checking package.json ==="
        cat package.json | head -10

    - name: Create system's network
      run: docker network create todo-net || true

    - name: Build and start all services
      run: |
        cd back-end
        # docker compose build --no-cache
        # Use both compose files - CI overrides development settings
        # docker compose -f docker-compose.yaml -f docker-compose.ci.yaml up -d
        docker compose -f docker-compose.ci.yaml build --no-cache
        docker compose -f docker-compose.ci.yaml up -d


    - name: Check what's in the built image vs running container
      run: |
        cd back-end
        echo "=== Files in the built image ==="
        docker run --rm back-end-api ls -la /usr/todo-app/
        echo "=== Mounts on running container ==="
        docker inspect todo-sails-app --format='{{range .Mounts}}{{.Source}} -> {{.Destination}} ({{.Type}}){{"\n"}}{{end}}' || echo "Container not running"
        echo "=== Files in running container (if still up) ==="
        docker exec todo-sails-app ls -la /usr/todo-app/ || echo "Container not accessible"


    # - name: Check what was copied to container
    #   run: |
    #     cd back-end
    #     echo "=== Container file listing ==="
    #     docker compose exec -T api ls -la /usr/todo-app/
    #     echo "=== Package.json in container ==="
    #     docker compose exec -T api cat /usr/todo-app/package.json | head -10 || echo "package.json not found!"

    # - name: Wait for services to be ready
    #   run: |
    #     echo "Waiting for API to be ready..."
    #     timeout 120 bash -c 'until curl -f http://localhost:1340/auth/csrf; do sleep 3; done'

    - name: Run integration tests inside container
      run: |
        cd back-end
        # docker compose exec -T api npm run integration-test
        docker compose exec -T api sh -c "API_HOST=localhost API_PORT=1337 npm run integration-test"
      # env:
      #   API_HOST: localhost #todo-sails-app
      #   API_PORT: 1337

    - name: Show container logs on failure
      if: failure()
      run: |
        cd back-end
        echo "=== API Logs ==="
        docker compose logs api
        echo "=== DB Logs ==="
        docker compose logs db
        echo "=== Redis Logs ==="
        docker compose logs session-db

    - name: Stop and clean up
      if: always()
      run: |
        cd back-end
        docker compose down -v || true
        docker network rm todo-net || true